---
title: "Output options"
subtitle: "Get different kinds of output from OpenCage"
author: "Daniel Possenriede, Jesse Sadler, MaÃ«lle Salmon"
description: >
  "`oc_forward()`/`oc_reverse()` return lists of various type, namely data frames, JSON, GeoJSON or URLs, depending on the `return` value you specify. The possible `return` values are `df_list`, `json_list`, `geojson_list` and `url_only`."
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Output options}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r setup, echo=FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)

library("opencage")

```

{opencage} contains two main types of main functions distinguished by the manner in which the results are returned:

1. The `oc_forward_df()`/`oc_reverse_df()` functions always return a single tibble.
2. The `oc_forward()`/`oc_reverse()` functions return a list of various types, depending on the `return` value you specify.
The possible `return` values are `df_list`, `json_list`, `geojson_list` and `url_only`.

Use of the `oc_forward_df()`/`oc_reverse_df()` functions is demonstrated in the "Introduction to opencage" and the "Customise your query" vignettes (`vignette("opencage")` and `vignette("customise_query")`, respectively) .
The function arguments mentioned in these other vignettes are also generally available with `oc_forward()`/`oc_reverse()`.
Here we will show the different return values available with `oc_forward()`/`oc_reverse()`.

## `df_list`

The default return value is `df_list`.
It returns a list of tibbles.

```{r df_list}
stations <- c("Casey Station", "McMurdo Station")
oc_forward(stations, return = "df_list")
```

The `df_list` type drives the `oc_forward_df()`/`oc_reverse_df()` functions.
You can use the `df_list` output in a `dplyr::mutate()` chain to replicate the functionality of `oc_forward_df()`:

```{r mutate}
library(dplyr, warn.conflicts = FALSE)

oc_data <-
  tibble(place = stations) %>%
  mutate(oc_result = oc_forward(place))

oc_data
```

This creates a list column `oc_result`, which can be easily unnested with `tidyr::unnest()`:

```{r unnest}
library(tidyr, warn.conflicts = FALSE)

oc_data %>% unnest(oc_result)
```

## `json_list`

OpenCage's main output format is JSON. When you specify `json_list` as the return type, you get the JSON as an R `list()`.

```{r json_list}
oc_forward("Casey Station", return = "json_list")
```

## `geojson_list`

When you choose `geojson_list` as the return type, the geocoder response will be returned as GeoJSON specified as an R `list()`.

```{r geojson_list}
gjsn_lst <- oc_forward("Casey Station", return = "geojson_list")
gjsn_lst
```

In fact, {opencage} returns a list of results in `geo_list` format, which should be compatible with the {[geojsonio](https://docs.ropensci.org/geojsonio/)} package.

```{r geo_list}
class(gjsn_lst[[1]])
```

## `url_only`

`url_only` returns the OpenCage URL for debugging purposes.

```{r url_only}
oc_forward("Casey Station", return = "url_only")
```

Your OpenCage API key is masked with the `OPENCAGE_KEY` string, by default.
If you really want {opencage} to display your API key with the URL, set the `show_key` argument in `oc_config()` to `TRUE`.

```{r show_key, include=TRUE, eval=FALSE}
oc_config(show_key = TRUE)
```

Note that the API key will only be returned with the URL in `base::interactive()` mode.

## `xml`

{opencage} does not support the XML response type at the moment.
Please file an [issue](https://github.com/ropensci/opencage/issues) or a [pull-request](https://github.com/ropensci/opencage/pulls) if you have a use-case that requires this.

## Return query text

`oc_forward()` and `oc_reverse()` have an `add_request` argument, indicating whether the request is returned again with the results.
If the `return` value is a `df_list`, the `placename` or `latitude,longitude` is added as a column to the results without a roundtrip to the API.
`json_list` results will contain all request parameters as returned by the API.
This would normally include your OpenCage API key, but {opencage} masks the key and replaces it with the `OPENCAGE_KEY` string in the output.
`add_request` is currently ignored by OpenCage for GeoJSON results.
